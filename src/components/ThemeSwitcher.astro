---
---

<div class="theme-switcher">
  <button class="theme-pill" data-theme="matrix" title="The Matrix (1999)" aria-label="Switch to Matrix theme">
    <span class="pill-icon">ðŸ’Š</span>
    <span class="pill-label">Matrix</span>
  </button>
  <button class="theme-pill active" data-theme="reloaded" title="The Matrix Reloaded (2003)" aria-label="Switch to Reloaded theme">
    <span class="pill-icon">ðŸ”µ</span>
    <span class="pill-label">Reloaded</span>
  </button>
  <button class="theme-pill" data-theme="revolutions" title="The Matrix Revolutions (2003)" aria-label="Switch to Revolutions theme">
    <span class="pill-icon">ðŸŸ </span>
    <span class="pill-label">Revolutions</span>
  </button>
</div>

<style>
  .theme-switcher {
    position: fixed;
    bottom: 1.5rem;
    left: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    z-index: 999;
    opacity: 1;
    transform: translateX(0);
    transition: all 0.4s ease;
  }
  
  .theme-switcher.hidden {
    opacity: 0;
    transform: translateX(-100px);
    pointer-events: none;
  }
  
  .theme-switcher:not(:hover):not(.expanded) .theme-pill:not(.active) {
    opacity: 0;
    transform: scale(0);
    pointer-events: none;
  }
  
  .theme-pill {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    background: var(--darker-bg);
    border: 2px solid transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 50%;
    box-shadow: var(--glow);
  }
  
  .theme-pill:hover {
    border-color: var(--primary-color);
    transform: scale(1.15);
  }
  
  .theme-pill.active {
    border-color: var(--primary-color);
    background: rgba(0, 212, 255, 0.2);
  }
  
  .pill-icon {
    font-size: 1.4rem;
  }
  
  .pill-label {
    display: none;
  }
  
  [data-theme="matrix"] .theme-pill[data-theme="matrix"].active {
    background: rgba(0, 255, 65, 0.2);
    box-shadow: 0 0 20px rgba(0, 255, 65, 0.5);
  }
  
  [data-theme="reloaded"] .theme-pill[data-theme="reloaded"].active {
    background: rgba(0, 212, 255, 0.2);
    box-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
  }
  
  [data-theme="revolutions"] .theme-pill[data-theme="revolutions"].active {
    background: rgba(255, 140, 0, 0.2);
    box-shadow: 0 0 20px rgba(255, 140, 0, 0.5);
  }
  
  @media (max-width: 1024px) {
    .theme-switcher {
      bottom: 1rem;
      left: 1rem;
    }
    
    .theme-pill {
      width: 42px;
      height: 42px;
    }
    
    .pill-icon {
      font-size: 1.2rem;
    }
    
    .theme-switcher.expanded .theme-pill:not(.active) {
      opacity: 1;
      transform: scale(1);
      pointer-events: auto;
    }
  }
</style>

<script>
  function initThemeSwitcher() {
    const switcher = document.querySelector('.theme-switcher');
    const pills = document.querySelectorAll('.theme-pill');
    const body = document.body;
    const savedTheme = localStorage.getItem('matrix-theme') || 'reloaded';
    let isExpanded = false;
    let lastScrollY = window.scrollY;
    
    setTheme(savedTheme);
    
    pills.forEach(pill => {
      pill.addEventListener('click', (e) => {
        const theme = pill.getAttribute('data-theme');
        const isActive = pill.classList.contains('active');
        
        if (isActive && window.innerWidth <= 1024) {
          e.stopPropagation();
          isExpanded = !isExpanded;
          switcher?.classList.toggle('expanded', isExpanded);
        } else if (theme) {
          setTheme(theme);
          localStorage.setItem('matrix-theme', theme);
          if (window.innerWidth <= 1024) {
            isExpanded = false;
            switcher?.classList.remove('expanded');
          }
        }
      });
    });
    
    document.addEventListener('click', (e) => {
      if (window.innerWidth <= 1024 && !switcher?.contains(e.target as Node)) {
        isExpanded = false;
        switcher?.classList.remove('expanded');
      }
    });
    
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > 100 && currentScrollY > lastScrollY) {
        switcher?.classList.add('hidden');
      } else if (currentScrollY <= 100 || currentScrollY < lastScrollY) {
        switcher?.classList.remove('hidden');
      }
      
      lastScrollY = currentScrollY;
    });
    
    function setTheme(theme: string) {
      body.setAttribute('data-theme', theme);
      
      pills.forEach(p => {
        if (p.getAttribute('data-theme') === theme) {
          p.classList.add('active');
        } else {
          p.classList.remove('active');
        }
      });
    }
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeSwitcher);
  } else {
    initThemeSwitcher();
  }
</script>

