---
interface Props {
  name?: string;
  title?: string;
  subtitle?: string;
}

const { 
  name = "Aurimas Ransys", 
  title = "Full Stack Developer",
  subtitle = "CS Student at Leeds Beckett University | Building the future, one line of code at a time."
} = Astro.props;
---

<section id="home" class="hero">
  <div class="hero-content">
    <div class="terminal-prompt" id="terminal-prompt" aria-label="Terminal prompt: user at matrix">user@matrix:~$ whoami</div>
    <h1 class="hero-title">{name}</h1>
    <p class="hero-subtitle">{title} <span class="typing-effect">|</span></p>
    <p>{subtitle}</p>
    <br>
    <div class="hero-buttons">
      <a href="#projects" class="cta-button">explore.portfolio()</a>
      <a href="/resume/Aurimas-Ransys-Resume.pdf" class="cta-button resume-button" download="Aurimas-Ransys-Resume.pdf">
        <span class="button-icon">[â†“]</span>
        download.resume()
      </a>
    </div>
  </div>
  
  <!-- Scroll Indicator -->
  <a href="#about" class="scroll-indicator" aria-label="Scroll to next section">
    <div class="scroll-arrow">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
        <path d="M6 9l6 6 6-6"/>
      </svg>
    </div>
  </a>
</section>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: relative;
    padding-bottom: 5rem;
  }
  
  .hero-content {
    max-width: 800px;
    padding: 0 2rem;
  }
  
  .terminal-prompt {
    display: inline-block;
    font-size: 1.2rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
    transition: color 0.5s ease;
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    -webkit-tap-highlight-color: transparent;
  }
  
  .terminal-prompt:hover {
    color: var(--secondary-color);
    text-shadow: 0 0 10px var(--primary-color);
  }
  
  .terminal-prompt.easter-egg {
    color: var(--secondary-color);
    text-shadow: 0 0 15px var(--primary-color);
  }
  
  .hero-title {
    font-size: clamp(2.5rem, 8vw, 5rem);
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    transition: background 0.5s ease;
  }
  
  .hero-subtitle {
    font-size: 1.5rem;
    margin-bottom: 2rem;
    opacity: 0.8;
  }
  
  .typing-effect {
    display: inline-block;
    border-right: 2px solid var(--primary-color);
    animation: blink 1s infinite;
    transition: border-color 0.5s ease;
  }
  
  @keyframes blink {
    50% { border-color: transparent; }
  }
  
  .cta-button {
    display: inline-block;
    padding: 1rem 2.5rem;
    background: transparent;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
    text-decoration: none;
    font-size: 1.1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    -webkit-tap-highlight-color: transparent;
  }
  
  .cta-button:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 4px;
  }
  
  .cta-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: var(--primary-color);
    transition: left 0.3s ease, background 0.5s ease;
    z-index: -1;
  }
  
  .cta-button:hover::before {
    left: 0;
  }
  
  .cta-button:hover {
    color: var(--darker-bg);
    box-shadow: var(--glow);
  }
  
  .hero-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1rem;
  }
  
  .resume-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .button-icon {
    font-size: 1rem;
    transition: transform 0.3s ease;
  }
  
  .resume-button:hover .button-icon {
    transform: scale(1.1);
  }
  
  @media (max-width: 640px) {
    .hero-title {
      font-size: 2.5rem;
    }
    
    .hero-buttons {
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
    }
    
    .cta-button {
      width: 100%;
      max-width: 280px;
      text-align: center;
    }
    
    .scroll-indicator {
      bottom: 2rem;
    }
  }
  
  /* Scroll Indicator */
  .scroll-indicator {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    color: var(--primary-color);
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    opacity: 0.8;
  }
  
  .scroll-indicator:hover {
    opacity: 1;
    transform: translateX(-50%) translateY(-5px);
  }
  
  .scroll-indicator:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 4px;
    border-radius: 4px;
  }
  
  .scroll-arrow {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
    background: rgba(0, 212, 255, 0.1);
    box-shadow: var(--glow);
    animation: bounce-arrow 2s ease-in-out infinite;
    transition: all 0.3s ease;
  }
  
  .scroll-arrow svg {
    color: var(--primary-color);
    filter: drop-shadow(0 0 4px currentColor);
    animation: pulse-arrow 2s ease-in-out infinite;
  }
  
  .scroll-indicator:hover .scroll-arrow {
    background: rgba(0, 212, 255, 0.2);
    box-shadow: 0 0 20px var(--primary-color);
    transform: scale(1.1);
  }
  
  @keyframes bounce-arrow {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  @keyframes pulse-arrow {
    0%, 100% {
      opacity: 1;
      filter: drop-shadow(0 0 4px currentColor);
    }
    50% {
      opacity: 0.6;
      filter: drop-shadow(0 0 8px currentColor);
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .scroll-arrow,
    .scroll-arrow svg {
      animation: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const resumeButton = document.querySelector('.resume-button') as HTMLAnchorElement;
    
    if (resumeButton) {
      resumeButton.addEventListener('click', (e) => {
        // Add a subtle animation feedback
        const icon = resumeButton.querySelector('.button-icon') as HTMLElement;
        if (icon) {
          icon.style.transform = 'scale(1.2) rotate(5deg)';
          setTimeout(() => {
            icon.style.transform = 'scale(1) rotate(0deg)';
          }, 200);
        }
        
        // Optional: Add download tracking or analytics here
      });
    }
    
    // Smooth scroll for scroll indicator
    const scrollIndicator = document.querySelector('.scroll-indicator') as HTMLAnchorElement;
    if (scrollIndicator) {
      scrollIndicator.addEventListener('click', (e) => {
        e.preventDefault();
        const target = document.querySelector('#about');
        if (target) {
          const targetPosition = (target as HTMLElement).offsetTop - 80; // Account for fixed nav
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    }
  });
</script>

