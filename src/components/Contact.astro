---
const contactInfo = {
  email: "ransys.dev@gmail.com",
  github: "github.com/aransys",
  linkedin: "https://uk.linkedin.com/in/aurimas-ransys",
  instagram: "@aurimasran",
  location: "Leeds",
  status: "Available for freelance projects, internships & opportunities"
};
---

<section id="contact" class="contact">
  <h2 class="section-title">Contact</h2>
  
  <!-- Neural Network Contact Form -->
  <div class="neural-container">
    <div class="neural-header">
      <div class="neural-title">Neural Network Interface</div>
      <div class="neural-status">ONLINE</div>
    </div>
    
    <div class="neural-body">
      <!-- Data Stream Visualization -->
      <div class="data-stream" aria-hidden="true">
        <div class="stream-line"></div>
        <div class="stream-line"></div>
        <div class="stream-line"></div>
        <div class="stream-line"></div>
      </div>
      
      <!-- Contact Form -->
      <form class="neural-form" id="contactForm" aria-label="Contact form">
        <div class="input-group">
          <label for="name">NODE_ID</label>
          <input type="text" id="name" name="name" placeholder="Enter your identifier" required aria-describedby="name-desc">
          <span id="name-desc" class="sr-only">Enter your name or identifier</span>
        </div>
        
        <div class="input-group">
          <label for="email">TRANSMISSION_PROTOCOL</label>
          <input type="email" id="email" name="email" placeholder="your.signal@domain.com" required aria-describedby="email-desc">
          <span id="email-desc" class="sr-only">Enter your email address</span>
        </div>
        
        <div class="input-group">
          <label for="subject">MESSAGE_TYPE</label>
          <input type="text" id="subject" name="subject" placeholder="Project inquiry, collaboration, etc." required aria-describedby="subject-desc">
          <span id="subject-desc" class="sr-only">Enter the subject of your message</span>
        </div>
        
        <div class="input-group">
          <label for="message">DATA_PAYLOAD</label>
          <textarea id="message" name="message" placeholder="Transmit your message through the neural network..." rows="4" required aria-describedby="message-desc"></textarea>
          <span id="message-desc" class="sr-only">Enter your message</span>
        </div>
        
        <div class="submit-container">
          <button type="submit" class="cta-button" id="submitButton" aria-label="Submit contact form">TRANSMIT</button>
        </div>
      </form>
      
      <!-- Live region for form status announcements -->
      <div id="form-status" class="sr-only" aria-live="polite" aria-atomic="true"></div>
      
      <!-- Transmission Status Modal -->
      <div class="transmission-backdrop" id="transmissionBackdrop" aria-hidden="true"></div>
      <div class="transmission-status" id="transmissionStatus" role="alertdialog" aria-modal="true" aria-labelledby="status-title" aria-live="assertive" aria-hidden="true">
        <div class="status-success" id="status-success">
          <div class="status-icon" aria-hidden="true">[√]</div>
          <div class="status-message" id="status-title">TRANSMISSION COMPLETE</div>
          <div class="status-subtitle">Data payload received & processed</div>
          <button class="sr-only" id="close-modal-btn" aria-label="Close modal">Close</button>
        </div>
        <div class="status-error" id="status-error">
          <div class="status-icon" aria-hidden="true">[✗]</div>
          <div class="status-message">TRANSMISSION FAILED</div>
          <div class="status-subtitle">Error: Connection timeout</div>
          <button class="sr-only" id="close-error-modal-btn" aria-label="Close error modal">Close</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Contact Info -->
  <div class="contact-info">
    <div class="info-terminal">
      <div class="terminal-line">$ cat contact.json</div>
      <div class="terminal-line desktop-view">&#123;</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"email": "<a href={`mailto:${contactInfo.email}`} class="contact-link">{contactInfo.email}</a>",</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"github": "<a href={`https://${contactInfo.github}`} target="_blank" rel="noopener noreferrer" class="contact-link">{contactInfo.github}</a>",</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"linkedin": "<a href={contactInfo.linkedin} target="_blank" rel="noopener noreferrer" class="contact-link">View Profile</a>",</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"instagram": "<a href={`https://www.instagram.com/${contactInfo.instagram.substring(1)}`} target="_blank" rel="noopener noreferrer" class="contact-link">{contactInfo.instagram}</a>",</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"location": "{contactInfo.location}",</div>
      <div class="terminal-line desktop-view">&nbsp;&nbsp;"status": "{contactInfo.status}"</div>
      <div class="terminal-line desktop-view">&#125;</div>
      
      <div class="mobile-view">
        <div class="terminal-line">&#123;</div>
        <div class="terminal-line"><a href={`mailto:${contactInfo.email}`} class="contact-link">{contactInfo.email}</a></div>
        <div class="terminal-line"><a href={`https://${contactInfo.github}`} target="_blank" rel="noopener noreferrer" class="contact-link">{contactInfo.github}</a></div>
        <div class="terminal-line"><a href={contactInfo.linkedin} target="_blank" rel="noopener noreferrer" class="contact-link">LinkedIn</a></div>
        <div class="terminal-line"><a href={`https://www.instagram.com/${contactInfo.instagram.substring(1)}`} target="_blank" rel="noopener noreferrer" class="contact-link">{contactInfo.instagram}</a></div>
        <div class="terminal-line">{contactInfo.location}</div>
        <div class="terminal-line">{contactInfo.status}</div>
        <div class="terminal-line">&#125;</div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Section Layout */
  .contact {
    padding: 5rem 0;
    max-width: 1200px;
    margin: 0 auto;
    padding-left: 2rem;
    padding-right: 2rem;
  }
  
  .section-title {
    font-size: 2.5rem;
    margin-bottom: 3rem;
    text-align: center;
    position: relative;
  }
  
  .section-title::before {
    content: '// ';
    color: var(--primary-color);
  }
  
  .section-title::after {
    content: '';
    display: block;
    width: 100px;
    height: 2px;
    background: var(--primary-color);
    margin: 1rem auto;
    box-shadow: var(--glow);
  }

  /* Neural Network Container */
  .neural-container {
    background: var(--gray-bg);
    border: 1px solid var(--primary-color);
    border-radius: 8px;
    margin-bottom: 3rem;
    overflow: hidden;
    position: relative;
    transition: all 0.3s ease;
  }

  .neural-container:hover {
    box-shadow: var(--glow);
  }

  /* Neural Header */
  .neural-header {
    background: var(--darker-bg);
    padding: 1rem 2rem;
    border-bottom: 1px solid var(--primary-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .neural-title {
    font-size: 1.1rem;
    color: var(--primary-color);
    font-weight: 600;
  }

  .neural-status {
    color: var(--primary-color);
    font-size: 0.9rem;
    font-weight: 600;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  /* Neural Body */
  .neural-body {
    padding: 2rem;
    background: var(--darker-bg);
    position: relative;
  }

  /* Data Stream Visualization */
  .data-stream {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    opacity: 0.1;
  }

  .stream-line {
    position: absolute;
    height: 1px;
    background: var(--primary-color);
    animation: stream-flow 3s linear infinite;
  }

  .stream-line:nth-child(1) { top: 20%; left: -100%; width: 200px; animation-delay: 0s; }
  .stream-line:nth-child(2) { top: 40%; right: -100%; width: 150px; animation-delay: 0.5s; }
  .stream-line:nth-child(3) { top: 60%; left: -100%; width: 180px; animation-delay: 1s; }
  .stream-line:nth-child(4) { top: 80%; right: -100%; width: 120px; animation-delay: 1.5s; }

  @keyframes stream-flow {
    0% { transform: translateX(0); opacity: 0; }
    50% { opacity: 1; }
    100% { transform: translateX(100vw); opacity: 0; }
  }

  /* Neural Form */
  .neural-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .input-group label {
    color: var(--primary-color);
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .input-group input,
  .input-group textarea {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid var(--primary-color);
    border-radius: 4px;
    color: var(--light-text);
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.9rem;
    padding: 0.75rem;
    transition: all 0.3s ease;
  }

  .input-group input:focus,
  .input-group textarea:focus {
    outline: none;
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(0, 212, 255, 0.2);
    background: rgba(0, 0, 0, 0.4);
  }

  .input-group input::placeholder,
  .input-group textarea::placeholder {
    color: rgba(230, 242, 255, 0.5);
    font-style: italic;
  }

  .input-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  /* Submit Container */
  .submit-container {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
  }

  /* CTA Button - Exact copy from Services */
  .cta-button {
    display: inline-block;
    padding: 1rem 2.5rem;
    background: transparent;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
    text-decoration: none;
    font-size: 1.1rem;
    font-weight: 600;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    -webkit-tap-highlight-color: transparent;
  }

  .cta-button:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 4px;
  }

  .cta-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: var(--primary-color);
    transition: left 0.3s ease, background 0.5s ease;
    z-index: -1;
  }

  .cta-button:hover::before {
    left: 0;
  }

  .cta-button:hover {
    color: var(--darker-bg);
    box-shadow: var(--glow);
  }

  /* Transmission Status Modal */
  .transmission-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    display: none;
    z-index: 999;
  }

  .transmission-backdrop.show {
    display: block;
    animation: fadeIn 0.3s ease;
  }

  .transmission-status {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 2rem;
    background: var(--darker-bg);
    border: 1px solid var(--primary-color);
    border-radius: 12px;
    box-shadow: var(--glow), 0 20px 40px rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 1000;
    min-width: 300px;
    max-width: 90vw;
    backdrop-filter: blur(10px);
  }

  .transmission-status.show {
    display: block;
    animation: fadeInScale 0.4s ease;
  }

  .transmission-status::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 12px 12px 0 0;
    animation: pulse-glow 2s infinite;
  }

  .status-success {
    text-align: center;
    color: var(--primary-color);
  }

  .status-error {
    text-align: center;
    color: var(--secondary-color);
  }

  .status-icon {
    font-family: 'JetBrains Mono', monospace;
    font-size: 1.8rem;
    margin-bottom: 0.75rem;
    letter-spacing: 2px;
    text-shadow: 0 0 10px currentColor;
    animation: pulse-status 1.5s infinite;
  }

  .status-message {
    font-family: 'JetBrains Mono', monospace;
    font-size: 1rem;
    font-weight: 600;
    letter-spacing: 1px;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
  }

  .status-subtitle {
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.85rem;
    opacity: 0.7;
    font-style: italic;
    letter-spacing: 0.5px;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fadeInScale {
    from { 
      opacity: 0; 
      transform: translate(-50%, -50%) scale(0.8); 
    }
    to { 
      opacity: 1; 
      transform: translate(-50%, -50%) scale(1); 
    }
  }

  @keyframes pulse-status {
    0%, 100% { 
      opacity: 1;
      text-shadow: 0 0 10px currentColor;
    }
    50% { 
      opacity: 0.7;
      text-shadow: 0 0 20px currentColor;
    }
  }

  @keyframes pulse-glow {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  /* Contact Info */
  .contact-info {
    margin-top: 2rem;
  }

  .info-terminal {
    background: var(--dark-bg);
    padding: 1.5rem;
    border-left: 3px solid var(--primary-color);
    border-radius: 4px;
    font-family: 'JetBrains Mono', monospace;
  }

  .terminal-line {
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
  }

  .contact-link {
    color: var(--primary-color);
    text-decoration: none;
    transition: all 0.3s ease;
    border-bottom: 1px solid transparent;
  }

  .contact-link:hover {
    border-bottom-color: var(--primary-color);
    text-shadow: var(--glow);
  }

  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Responsive Design */
  .mobile-view { display: none; }
  .desktop-view { display: block; }

  @media (max-width: 1024px) and (min-width: 641px) {
    .contact {
      max-width: 1040px;
      margin-right: 2rem;
    }
  }

  @media (max-width: 640px) {
    .contact {
      padding: 3rem 1rem;
    }

    .section-title {
      font-size: 2rem;
      margin-bottom: 2rem;
    }

    .neural-body {
      padding: 1.5rem;
    }

    .desktop-view { display: none; }
    .mobile-view { display: block; }

    .terminal-line {
      margin-bottom: 0.75rem;
      line-height: 1.6;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
    const status = document.getElementById('transmissionStatus') as HTMLElement;
    const backdrop = document.getElementById('transmissionBackdrop') as HTMLElement;
    const formStatus = document.getElementById('form-status') as HTMLElement;
    
    if (!form || !submitButton || !status || !backdrop || !formStatus) return;
    
    // Store the element that had focus before modal opened
    let focusedElementBeforeModal: HTMLElement | null = null;
    
    // Focus trap for modal
    const trapFocus = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      
      const focusableElements = status.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      const firstElement = focusableElements[0] as HTMLElement;
      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
      
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          lastElement?.focus();
          e.preventDefault();
        }
      } else {
        if (document.activeElement === lastElement) {
          firstElement?.focus();
          e.preventDefault();
        }
      }
    };
    
    // Wait for EmailJS to load before initializing
    const initEmailJS = () => {
      if ((window as any).emailjs) {
        (window as any).emailjs.init('UpRQgNE_wRova4Edf');
      } else {
        setTimeout(initEmailJS, 100);
      }
    };
    
    initEmailJS();
    
    // Function to close modal and restore focus
    const closeModal = () => {
      backdrop.classList.remove('show');
      status.classList.remove('show');
      backdrop.setAttribute('aria-hidden', 'true');
      status.setAttribute('aria-hidden', 'true');
      status.removeEventListener('keydown', trapFocus);
      
      // Restore focus to the element that was focused before modal opened
      if (focusedElementBeforeModal) {
        focusedElementBeforeModal.focus();
      }
    };
    
    // Close modal handlers
    backdrop.addEventListener('click', closeModal);
    const escapeHandler = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && status.classList.contains('show')) {
        closeModal();
      }
    };
    document.addEventListener('keydown', escapeHandler);
    
    // Form submission
    form.addEventListener('submit', async function(e: Event) {
      e.preventDefault();
      
      // Basic validation
      const inputs = form.querySelectorAll('input, textarea') as NodeListOf<HTMLInputElement | HTMLTextAreaElement>;
      let isValid = true;
      
      inputs.forEach(input => {
        if (!input.value.trim()) {
          isValid = false;
          input.style.borderColor = '#ff6b6b';
          input.setAttribute('aria-invalid', 'true');
        } else {
          input.style.borderColor = 'var(--primary-color)';
          input.removeAttribute('aria-invalid');
        }
      });
      
      if (!isValid) {
        formStatus.textContent = 'Please fill in all required fields';
        return;
      }
      
      // Show loading state
      submitButton.disabled = true;
      submitButton.textContent = 'TRANSMITTING...';
      status.classList.remove('show');
      backdrop.classList.remove('show');
      
      try {
        // Check if EmailJS is available
        if (!(window as any).emailjs) {
          throw new Error('EmailJS library not loaded');
        }
        
        // Prepare email template parameters
        const templateParams = {
          from_name: (document.getElementById('name') as HTMLInputElement).value,
          from_email: (document.getElementById('email') as HTMLInputElement).value,
          subject: (document.getElementById('subject') as HTMLInputElement).value,
          message: (document.getElementById('message') as HTMLTextAreaElement).value,
        };
        
        // Send email using EmailJS
        const response = await (window as any).emailjs.send(
          'service_vytd1vl',
          'template_t1f34iw',
          templateParams
        );
        
        if (response.status === 200) {
          // Show success modal
          const successElement = status.querySelector('.status-success') as HTMLElement;
          const errorElement = status.querySelector('.status-error') as HTMLElement;
          
          if (successElement && errorElement) {
            successElement.style.display = 'block';
            errorElement.style.display = 'none';
          }
          
          // Store focused element before opening modal
          focusedElementBeforeModal = document.activeElement as HTMLElement;
          
          // Show modal with proper ARIA attributes
          backdrop.setAttribute('aria-hidden', 'false');
          status.setAttribute('aria-hidden', 'false');
          backdrop.classList.add('show');
          status.classList.add('show');
          
          // Focus the close button or status title
          const statusTitle = document.getElementById('status-title');
          if (statusTitle) {
            statusTitle.focus();
          }
          
          // Add focus trap
          status.addEventListener('keydown', trapFocus);
          
          // Reset form
          form.reset();
          formStatus.textContent = 'Message sent successfully';
          
          // Auto-dismiss after 4 seconds
          setTimeout(() => {
            closeModal();
          }, 4000);
        } else {
          throw new Error('Email sending failed');
        }
        
      } catch (error) {
        console.error('EmailJS Error:', error);
        // Show error modal
        const successElement = status.querySelector('.status-success') as HTMLElement;
        const errorElement = status.querySelector('.status-error') as HTMLElement;
        
        if (successElement && errorElement) {
          successElement.style.display = 'none';
          errorElement.style.display = 'block';
        }
        
        // Store focused element before opening modal
        focusedElementBeforeModal = document.activeElement as HTMLElement;
        
        // Show modal with proper ARIA attributes
        backdrop.setAttribute('aria-hidden', 'false');
        status.setAttribute('aria-hidden', 'false');
        backdrop.classList.add('show');
        status.classList.add('show');
        
        // Focus the error message
        const errorMessage = errorElement?.querySelector('.status-message');
        if (errorMessage) {
          (errorMessage as HTMLElement).focus();
        }
        
        // Add focus trap
        status.addEventListener('keydown', trapFocus);
        
        formStatus.textContent = 'Error sending message. Please try again.';
        
        // Auto-dismiss error after 5 seconds
        setTimeout(() => {
          closeModal();
        }, 5000);
      } finally {
        // Reset button
        submitButton.disabled = false;
        submitButton.textContent = 'TRANSMIT';
      }
    });
  });
</script>